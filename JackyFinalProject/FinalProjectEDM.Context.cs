//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JackyFinalProject
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class JackyDigitalXDBEntities : DbContext
    {
        public JackyDigitalXDBEntities()
            : base("name=JackyDigitalXDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AddressType> AddressTypes { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<ContactType> ContactTypes { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Invoiced> Invoiceds { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductSubCategory> ProductSubCategories { get; set; }
        public virtual DbSet<Retailer> Retailers { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Shipper> Shippers { get; set; }
        public virtual DbSet<ShipperOption> ShipperOptions { get; set; }
        public virtual DbSet<ShippingLocation> ShippingLocations { get; set; }
        public virtual DbSet<ShippingMethod> ShippingMethods { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<WishList> WishLists { get; set; }
        public virtual DbSet<WishListItem> WishListItems { get; set; }
    
        public virtual int addEmployeeToRole(Nullable<int> employeeID, Nullable<int> roleID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addEmployeeToRole", employeeIDParameter, roleIDParameter);
        }
    
        public virtual int createEmployeePassword(Nullable<int> employeeID, string password)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createEmployeePassword", employeeIDParameter, passwordParameter);
        }
    
        public virtual int deleteCustomer(Nullable<int> cID)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteCustomer", cIDParameter);
        }
    
        public virtual int deleteCustomerAddress(Nullable<int> addressID)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteCustomerAddress", addressIDParameter);
        }
    
        public virtual int deleteCustomerContact(Nullable<int> contactID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteCustomerContact", contactIDParameter);
        }
    
        public virtual int deleteEmployee(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteEmployee", empIDParameter);
        }
    
        public virtual int deleteEmployeeAddress(Nullable<int> addressID)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteEmployeeAddress", addressIDParameter);
        }
    
        public virtual int deleteEmployeeContact(Nullable<int> contactID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteEmployeeContact", contactIDParameter);
        }
    
        public virtual int deleteOrder(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteOrder", idParameter);
        }
    
        public virtual int deleteOrderDetail(Nullable<int> orderID, Nullable<int> productID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("orderID", orderID) :
                new ObjectParameter("orderID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteOrderDetail", orderIDParameter, productIDParameter);
        }
    
        public virtual int deleteProduct(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteProduct", productIDParameter);
        }
    
        public virtual int deleteRetailer(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteRetailer", idParameter);
        }
    
        public virtual int insertCustomer(string first, string last, ObjectParameter customerID)
        {
            var firstParameter = first != null ?
                new ObjectParameter("First", first) :
                new ObjectParameter("First", typeof(string));
    
            var lastParameter = last != null ?
                new ObjectParameter("Last", last) :
                new ObjectParameter("Last", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertCustomer", firstParameter, lastParameter, customerID);
        }
    
        public virtual int insertCustomerAddress(Nullable<int> customerID, Nullable<int> addressType, string street, string suburb, string city, string postal, string country)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var addressTypeParameter = addressType.HasValue ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(int));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var suburbParameter = suburb != null ?
                new ObjectParameter("Suburb", suburb) :
                new ObjectParameter("Suburb", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var postalParameter = postal != null ?
                new ObjectParameter("Postal", postal) :
                new ObjectParameter("Postal", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertCustomerAddress", customerIDParameter, addressTypeParameter, streetParameter, suburbParameter, cityParameter, postalParameter, countryParameter);
        }
    
        public virtual int insertCustomerContact(Nullable<int> customerID, Nullable<int> contactType, string contact)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var contactTypeParameter = contactType.HasValue ?
                new ObjectParameter("ContactType", contactType) :
                new ObjectParameter("ContactType", typeof(int));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertCustomerContact", customerIDParameter, contactTypeParameter, contactParameter);
        }
    
        public virtual int insertEmployee(string first, string last, ObjectParameter employID)
        {
            var firstParameter = first != null ?
                new ObjectParameter("First", first) :
                new ObjectParameter("First", typeof(string));
    
            var lastParameter = last != null ?
                new ObjectParameter("Last", last) :
                new ObjectParameter("Last", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertEmployee", firstParameter, lastParameter, employID);
        }
    
        public virtual int insertEmployeeAddress(Nullable<int> employeeID, Nullable<int> addressType, string street, string suburb, string city, string postal, string country)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var addressTypeParameter = addressType.HasValue ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(int));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var suburbParameter = suburb != null ?
                new ObjectParameter("Suburb", suburb) :
                new ObjectParameter("Suburb", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var postalParameter = postal != null ?
                new ObjectParameter("Postal", postal) :
                new ObjectParameter("Postal", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertEmployeeAddress", employeeIDParameter, addressTypeParameter, streetParameter, suburbParameter, cityParameter, postalParameter, countryParameter);
        }
    
        public virtual int insertEmployeeContact(Nullable<int> employeeID, Nullable<int> contactType, string contact)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var contactTypeParameter = contactType.HasValue ?
                new ObjectParameter("ContactType", contactType) :
                new ObjectParameter("ContactType", typeof(int));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertEmployeeContact", employeeIDParameter, contactTypeParameter, contactParameter);
        }
    
        public virtual int insertInvoiced(Nullable<int> orderID, Nullable<int> employeeID, Nullable<int> shipping, Nullable<System.DateTime> date)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("orderID", orderID) :
                new ObjectParameter("orderID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var shippingParameter = shipping.HasValue ?
                new ObjectParameter("shipping", shipping) :
                new ObjectParameter("shipping", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertInvoiced", orderIDParameter, employeeIDParameter, shippingParameter, dateParameter);
        }
    
        public virtual int insertOrder(Nullable<int> customerID, Nullable<int> addressID, Nullable<System.DateTime> orderDate, Nullable<bool> complete)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("addressID", addressID) :
                new ObjectParameter("addressID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("orderDate", orderDate) :
                new ObjectParameter("orderDate", typeof(System.DateTime));
    
            var completeParameter = complete.HasValue ?
                new ObjectParameter("complete", complete) :
                new ObjectParameter("complete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertOrder", customerIDParameter, addressIDParameter, orderDateParameter, completeParameter);
        }
    
        public virtual int insertOrderDetail(Nullable<int> orderID, Nullable<int> productID, Nullable<int> quantity, Nullable<bool> packaged, Nullable<int> packagedBy)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("orderID", orderID) :
                new ObjectParameter("orderID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var packagedParameter = packaged.HasValue ?
                new ObjectParameter("packaged", packaged) :
                new ObjectParameter("packaged", typeof(bool));
    
            var packagedByParameter = packagedBy.HasValue ?
                new ObjectParameter("packagedBy", packagedBy) :
                new ObjectParameter("packagedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertOrderDetail", orderIDParameter, productIDParameter, quantityParameter, packagedParameter, packagedByParameter);
        }
    
        public virtual int insertProduct(Nullable<int> retailerID, Nullable<int> subcategoryID, string name, string description, Nullable<decimal> price, Nullable<int> stock, byte[] picture)
        {
            var retailerIDParameter = retailerID.HasValue ?
                new ObjectParameter("retailerID", retailerID) :
                new ObjectParameter("retailerID", typeof(int));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("subcategoryID", subcategoryID) :
                new ObjectParameter("subcategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(int));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("picture", picture) :
                new ObjectParameter("picture", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertProduct", retailerIDParameter, subcategoryIDParameter, nameParameter, descriptionParameter, priceParameter, stockParameter, pictureParameter);
        }
    
        public virtual int removeEmployeeFromRole(Nullable<int> employeeID, Nullable<int> roleID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("removeEmployeeFromRole", employeeIDParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<selectCustomerAddresses_Result> selectCustomerAddresses(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectCustomerAddresses_Result>("selectCustomerAddresses", customerIDParameter);
        }
    
        public virtual ObjectResult<selectCustomerContacts_Result> selectCustomerContacts(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectCustomerContacts_Result>("selectCustomerContacts", customerIDParameter);
        }
    
        public virtual ObjectResult<selectCustomers_Result> selectCustomers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectCustomers_Result>("selectCustomers");
        }
    
        public virtual ObjectResult<selectEmployeeAddresses_Result> selectEmployeeAddresses(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectEmployeeAddresses_Result>("selectEmployeeAddresses", employeeIDParameter);
        }
    
        public virtual ObjectResult<selectEmployeeContacts_Result> selectEmployeeContacts(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectEmployeeContacts_Result>("selectEmployeeContacts", employeeIDParameter);
        }
    
        public virtual ObjectResult<string> selectEmployeeRoles(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("selectEmployeeRoles", employeeIDParameter);
        }
    
        public virtual ObjectResult<selectEmployees_Result> selectEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectEmployees_Result>("selectEmployees");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int updateAddress(Nullable<int> addressID, Nullable<int> addressType, string street, string suburb, string city, string postal, string country)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var addressTypeParameter = addressType.HasValue ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(int));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var suburbParameter = suburb != null ?
                new ObjectParameter("Suburb", suburb) :
                new ObjectParameter("Suburb", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var postalParameter = postal != null ?
                new ObjectParameter("Postal", postal) :
                new ObjectParameter("Postal", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateAddress", addressIDParameter, addressTypeParameter, streetParameter, suburbParameter, cityParameter, postalParameter, countryParameter);
        }
    
        public virtual int updateContact(Nullable<int> contactID, Nullable<int> contactTypeID, string contact)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var contactTypeIDParameter = contactTypeID.HasValue ?
                new ObjectParameter("ContactTypeID", contactTypeID) :
                new ObjectParameter("ContactTypeID", typeof(int));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateContact", contactIDParameter, contactTypeIDParameter, contactParameter);
        }
    
        public virtual int updateCustomer(Nullable<int> cID, string first, string last)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var firstParameter = first != null ?
                new ObjectParameter("First", first) :
                new ObjectParameter("First", typeof(string));
    
            var lastParameter = last != null ?
                new ObjectParameter("Last", last) :
                new ObjectParameter("Last", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateCustomer", cIDParameter, firstParameter, lastParameter);
        }
    
        public virtual int updateEmployee(Nullable<int> employeeID, string first, string last)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var firstParameter = first != null ?
                new ObjectParameter("First", first) :
                new ObjectParameter("First", typeof(string));
    
            var lastParameter = last != null ?
                new ObjectParameter("Last", last) :
                new ObjectParameter("Last", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateEmployee", employeeIDParameter, firstParameter, lastParameter);
        }
    
        public virtual int updateInvoiced(Nullable<int> invoiceID, Nullable<int> orderID, Nullable<int> employeeID, Nullable<int> shipping, Nullable<System.DateTime> date)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("invoiceID", invoiceID) :
                new ObjectParameter("invoiceID", typeof(int));
    
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("orderID", orderID) :
                new ObjectParameter("orderID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var shippingParameter = shipping.HasValue ?
                new ObjectParameter("shipping", shipping) :
                new ObjectParameter("shipping", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateInvoiced", invoiceIDParameter, orderIDParameter, employeeIDParameter, shippingParameter, dateParameter);
        }
    
        public virtual int updateOrder(Nullable<int> orderID, Nullable<int> customerID, Nullable<int> addID, Nullable<System.DateTime> orderDate, Nullable<bool> complete)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("orderID", orderID) :
                new ObjectParameter("orderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var addIDParameter = addID.HasValue ?
                new ObjectParameter("addID", addID) :
                new ObjectParameter("addID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("orderDate", orderDate) :
                new ObjectParameter("orderDate", typeof(System.DateTime));
    
            var completeParameter = complete.HasValue ?
                new ObjectParameter("complete", complete) :
                new ObjectParameter("complete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateOrder", orderIDParameter, customerIDParameter, addIDParameter, orderDateParameter, completeParameter);
        }
    
        public virtual int updateProduct(Nullable<int> productID, Nullable<int> retailerID, Nullable<int> subcategoryID, string name, string description, Nullable<decimal> price, Nullable<int> stock, byte[] picture)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            var retailerIDParameter = retailerID.HasValue ?
                new ObjectParameter("retailerID", retailerID) :
                new ObjectParameter("retailerID", typeof(int));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("subcategoryID", subcategoryID) :
                new ObjectParameter("subcategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(int));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("picture", picture) :
                new ObjectParameter("picture", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateProduct", productIDParameter, retailerIDParameter, subcategoryIDParameter, nameParameter, descriptionParameter, priceParameter, stockParameter, pictureParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> verifyEmployee(string first, string password)
        {
            var firstParameter = first != null ?
                new ObjectParameter("First", first) :
                new ObjectParameter("First", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("verifyEmployee", firstParameter, passwordParameter);
        }
    }
}
